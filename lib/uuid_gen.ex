defmodule UUID_GEN do
  @moduledoc """
  Documentation for `UUID_GEN`.
  """

  @options [
    url: :string,
    dns: :string,
    oid: :string,
    x500: :string,
    hex: :boolean,
    urn: :boolean,
    help: :boolean
  ]

  @aliases [
    h: :help
  ]

  @formats [
    :hex,
    :urn
  ]

  @usage """
  Usage: uuid [1|3|4|5] [--url|--dns|--oid|--x500 name] [--hex|--urn]

  A command-line tool for generating universal unique identifiers (uuids).

  1 - Generate a version 1 uuid based on MAC address. 
  3 - Generate a version 3 uuid based on the MD5 hash of ARG.
  4 - Generate a version 4 uuid based on randomly generated bytes.
  5 - Generate a version 5 uuid based on the SHA1 hash of ARG.

  If a version number isn't provided, the default is version 4.

  Options:
    --url    A uniform resource locator.
    --dns    A fully qualified domain name.
    --oid    An object identifier.
    --x500   A x.500 distinguished name.

    --hex    Provides the uuid in hexidecimal format without the "-"s.
    --urn    Provides the uuid in the uniform resource name namespace.

  Examples:
    > uuid
    a88beae3-2989-4e80-938a-6d3bd0848189

    > uuid 1
    48dd6b58-4768-11ec-8aeb-xxxxxxxxxxxx

    > uuid 3 --dns elixir-lang.org
    8193d89e-bc38-3c0c-aca8-a9dcc3493799

    > uuid 3 --dns elixir-lang.org --hex
    8193d89ebc383c0caca8a9dcc3493799

    > uuid 3 --url elixir-lang.org --urn
    urn:uuid:c2f6bfdf-0011-3df9-a67f-faf9132e0185
  """

  @doc """
  Generates a new UUID.
  """
  def generate_uuid(version, namespace, name, format) do
    case version do
      "1" -> {:ok, UUID.uuid1()}
      "3" -> {:ok, UUID.uuid3(namespace, name, format)}
      "4" -> {:ok, UUID.uuid4()}
      "5" -> {:ok, UUID.uuid5(namespace, name, format)}
      _ -> {:err, "Unknown uuid version number #{version}."}
    end
  end

  def process_args([help: 1], [], []) do
    {:ok, @usage}
  end
  
  def process_args([], [], []) do
    {:ok, UUID.uuid4()}
  end
  
  def process_args([], args, []) do
    case args do
      ["1"] -> {:ok, UUID.uuid1()}
      ["4"] -> {:ok, UUID.uuid4()}
      _ -> generate_uuid(hd(args), :nil, "", :default)
    end
  end
  
  def process_args(options, args, []) do
    {fmt, ns} = Keyword.split(options, @formats)
    {namespace, name} = hd(ns)
    {format, _} = if fmt == [], do: {:default, ""}, else: hd(fmt)
    version = hd(args)
    generate_uuid(version, namespace, name, format)
  end

  def process_args(_, _, unused) do
    {:err, "Argument #{elem(hd(unused), 0)} is not recognized as a valid option."}
  end
  
  @doc """
  Parse command-line arguments and attempt to generate a new UUID.
  """
  def main(args_) do
    {options, args, unused} = OptionParser.parse(args_, strict: @options, aliases: @aliases)
    {status, uuid} = process_args(options, args, unused)
    case status do
      :ok -> IO.puts("#{uuid}")
      :err -> IO.puts(:stderr, "#{uuid}"); System.halt(1)
    end
  end
end
